---
title: "Training and testing"
format: html
editor: source
editor_options: 
  chunk_output_type: console
---

```{r include = FALSE}
knitr::opts_chunk$set(fig.retina = 2,
                      fig.align  = "center")
```


## Global parameters

The path to the data folder:

```{r}
data_path <- paste0("/Users/MarcChoisy/Library/CloudStorage/",
                    "OneDrive-OxfordUniversityClinicalResearchUnit/",
                    "GitHub/choisy/typhoid/")
```


## Packages

The required packages:

```{r}
required_packages <- c("dplyr", "purrr", "rsample", "yardstick", "recipes", "themis",
                       "parsnip", "workflows", "tune", "finetune", "magrittr")
```

Making sure that the required packages are installed:

```{r}
to_ins <- required_packages[! required_packages %in% installed.packages()[, "Package"]]
if (length(to_ins)) install.packages(to_ins)
rm(required_packages, to_ins)
```

Loading these packages:

```{r message = FALSE}
library(dplyr)
library(purrr)
library(rsample)
library(recipes)
library(themis)
library(parsnip)
library(workflows)
library(tune)
library(finetune)
library(yardstick)
library(magrittr)
```


## Utilitary functions

```{r}
file_exists <- function(x) file.exists(paste0(data_path, "cache/", x))
readRDS2 <- function(x) readRDS(paste0(data_path, "cache/", x))
saveRDS2 <- function(object, file) saveRDS(object, paste0(data_path, "cache/", file))
```

```{r}
logical2factor <- function(x) factor(x, c("FALSE", "TRUE"))
```

```{r}
show_positive_only <- function(x) x[x > 0]
```

```{r}
vline <- function(v, ...) abline(v = v, ...)
```

```{r}
collect_metrics2 <- function(...) {
  collect_metrics(...) |> 
    select(-.config, -.estimator)
}
```

Not used yet:

```{r}
get_nonnull_results <- function(x) {
  x[!map_lgl(x, ~ is.null(.x$result))] |> 
    map(~ .x$result)
}
```


## Reading the clean data

The Nepal dataset:

```{r}
nepal <- paste0(data_path, "clean_data/nepal.rds") |>
  readRDS() |> 
  mutate(across(c(cough, diarrhea, vomiting, abdominal_pain, constipation, headache),
                as.logical),
         across(c(age, platelets), as.numeric),
         across(where(is.logical), logical2factor)) |> 
  select(-starts_with("score"))
```

The Cambodia and Bangladesh dataset:

```{r}
cambodia_bangladesh <- paste0(data_path, "clean_data/cambodia_bangladesh.rds") |>
  readRDS() |> 
  mutate(across(where(is.logical), logical2factor)) |> 
  select(-country)
```

Checking the consistency of the levels of the factors between the two datasets:

```{r}
levels_nepal <- nepal |> 
  select(sex, IgM, CRP) |> 
  map(levels)

levels_cambodia_bangladesh <- cambodia_bangladesh |> 
  select(sex, IgM, CRP) |> 
  map(levels)

identical(levels_nepal, levels_cambodia_bangladesh)
rm(levels_nepal, levels_cambodia_bangladesh)
```


## Comparing the two data sets

```{r}
nrow(nepal)
nrow(na.exclude(nepal))
```

```{r}
nrow(cambodia_bangladesh)
nrow(na.exclude(cambodia_bangladesh))
```

```{r}
nepal |> 
  map_int(~ sum(is.na(.x))) |> 
  show_positive_only()
```

```{r}
cambodia_bangladesh |> 
  map_int(~ sum(is.na(.x))) |> 
  show_positive_only()
```

```{r}
nepal |> 
  pull(fever) |> 
  min()
```

```{r}
cambodia_bangladesh |> 
  pull(fever) |> 
  min()
```

```{r}
cambodia_bangladesh2 <- filter(cambodia_bangladesh, fever > 2)
nrow(cambodia_bangladesh2)
```

```{r}
table(nepal$culture)
table(cambodia_bangladesh2$culture)
```

```{r}
lwd_val <- 4

densities <- map_dfr(list(nepal, cambodia_bangladesh, cambodia_bangladesh2),
                     ~ pull(.x, age) |>
                       density(from = 0, na.rm = TRUE) |>
                       with(tibble(x, y)), .id = "dataset")

with(densities, plot(x, y, type = "n", xlab = "age (year)", ylab = "density"))
densities |> 
  mutate(color = as.numeric(dataset) + 1) |> 
  group_by(dataset) |> 
  group_walk(~ with(.x, lines(x, y, col = color, lwd = lwd_val)))
legend("topright", c("Nepal", "Cambodia & Bangladesh", "Cambodia & Bangladesh 2"),
       col = 2:4, lwd = lwd_val, bty = "n")
```

```{r}
cambodia_bangladesh |> 
  select(cough, diarrhea, vomiting, abdominal_pain, constipation, headache) |> 
  na.exclude() |> 
  mutate(across(everything(), ~ .x == "TRUE")) |> 
  cor()
```


## A simple non-tuned pipeline

```{r}
pipeline <- function(data_preprocessing, model) {
## 1. Data preprocessing ##############################################################

  cambodia_bangladesh <- common_processing(cambodia_bangladesh)
  nepal <- common_processing(nepal)
  
  splits <- make_splits(list(analysis   = seq(nrow(cambodia_bangladesh)),
                             assessment = nrow(cambodia_bangladesh) + seq(nrow(nepal))),
                        bind_rows(cambodia_bangladesh, nepal))
  
  training_data <- training(splits)
  
## 2. Model ###########################################################################

  the_recipe <- recipe(culture ~ ., training_data) |> 
    step_dummy(all_factor_predictors()) |> 
    step_smotenc(culture)
  
  models <- list(logistic_reg = logistic_reg("classification", "glm"),
                 randomForest = rand_forest("classification", "randomForest"))
  
  the_workflow <- workflow(the_recipe, models[[model]])
  
## 3. Evaluation ######################################################################

  the_metric <- metric_set(roc_auc)
  
  testing_metric <- the_workflow |>
    last_fit(splits, metrics = the_metric) |> 
    collect_metrics2()
  
  cv_resamples <- the_workflow |>
    fit_resamples(vfold_cv(training_data, repeats = 50),
                  metrics = the_metric,
                  control = control_resamples(save_pred = TRUE))
   
  list(mean_metric_values = cv_resamples |> 
         collect_metrics2() |> 
         left_join(testing_metric, ".metric"),
       cv_values = cv_resamples |> 
         collect_metrics(summarize = FALSE) |> 
         pull(.estimate) |> 
         na.exclude(),
       bootstrap_values = splits |> 
         testing() |>
         bootstraps(500) |> 
         extract2("splits") |> 
         map(as_tibble) |> 
         map_dbl(~ augment(fitted_model, .x) |> 
                   roc_auc(truth = culture, .pred_FALSE) |>
                   pull(.estimate)))
}
```

```{r}
add_distribution <- function(density_curve, color = 4, ci_vals = seq(.05, .95, .05)) {
  total_area <- sum(density_curve$y)

  high_density_area <- function(threshold) {
    density_curve |> 
      filter(y > threshold) |> 
      pull(y) |> 
      sum() |> 
      divide_by(total_area)
  }
  
  ci2y <- function(ci) {
    optimize(function(x) abs(high_density_area(x) - ci), c(0, max(density_curve$y)))$min
  }
  
  alpha <- 1 / (length(ci_vals) + 1)
  polygon2 <- function(...) polygon(..., border = NA, col = adjustcolor(color, alpha))
  
  with(density_curve, {
    x2 <- c(0, x, 1) 
    y2 <- c(0, y, 0)
    lines(x2, y2, col = color)
    polygon2(x2, y2)
  })
  
  ci_vals |>
    map_dbl(ci2y) |> 
    map(~ filter(density_curve, y > .x)) |> 
    rev() |> 
    walk(~ with(.x, polygon2(c(x[1], x, tail(x, 1)), c(0, y, 0))))
}
```

```{r}
density_data_frame <- function(xs) {
  xs |>
    density(n = 2^10, from = 0, to = 1) |> 
    with(tibble(x, y))
}
```

```{r}
plot_outline <- function(...)  {
  plot(NA, xlim = 0:1, xlab = "ROC AUC", ylab = "density", ...)
}
```

Computing (takes 48"):

```{r eval = FALSE}
out_logistic_reg <- pipeline(function(x) {
  x |> 
    select(culture, sex, age, cough, diarrhea, vomiting, abdominal_pain,
           constipation, headache, pulse, temperature) |> 
    na.exclude()
  }, "logistic_reg")
```

```{r include = FALSE}
if (file_exists("out_logistic_reg.rds")) {
  out_logistic_reg <- readRDS2("out_logistic_reg.rds")
} else {
  out_logistic_reg <- pipeline(function(x) {
    x |> 
      select(culture, sex, age, cough, diarrhea, vomiting, abdominal_pain,
             constipation, headache, pulse, temperature) |> 
      na.exclude()
    }, "logistic_reg")
  saveRDS2(out_logistic_reg, "out_logistic_reg.rds")
}
```


Visualisation of the ROC AUC on the cross-validated training dataset:

```{r}
density_curve_training <- out_logistic_reg |> 
  extract2("cv_values") |> 
  density_data_frame()

plot_outline(ylim = c(0, max(density_curve_training$y)))
add_distribution(density_curve_training)

out_logistic_reg |>
  extract2("mean_metric_values") |>
  pull(.estimate) |> 
  vline(col = 2, lwd = 3)
```

Visualisation of the ROC AUC on the cross-validated training dataset and the
bootstrapped testing dataset:

```{r}
density_curve_testing <- out_logistic_reg |> 
  extract2("bootstrap_values") |> 
  density_data_frame()
  
plot_outline(ylim = c(0, max(max(density_curve_training$y),
                             max(density_curve_testing$y))))
add_distribution(density_curve_training)
add_distribution(density_curve_testing, 2)

out_logistic_reg |>                    ## MAKE
  extract2("mean_metric_values") |>    ## A
  pull(.estimate) |>                   ## FUNCTION
  vline(col = 2, lwd = 3)              ##
```

Next:

* ROC curves
* Feature importance
* Interpretation (in particular with continuous variables)
* Clinical score








The ROC curve:

```{r eval = FALSE}
default_workflow |>
  last_fit(splits, metrics = the_metric) |> 
  collect_predictions() |> 
  roc_curve(culture, .pred_yes) |> 
  with(plot(1 - specificity, sensitivity, type = "l"))

plot(NA, xlim = 0:1, ylim = 0:1)

aaa <- cv_data |> 
  collect_predictions() |> 
  group_by(id, id2) |> 
  group_split() |> 
  map(safely(roc_curve), culture, .pred_yes) |> 
  get_nonnull_results() |> 
  walk(~ with(.x, lines(1 - specificity, sensitivity)))
```


